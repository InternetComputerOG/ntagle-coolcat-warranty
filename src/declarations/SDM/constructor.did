type Time = int;
type TagUid = text;
type TagEncodeResult = record {key: AESKey;};
type TagCtr = nat32;
type ScanResult = 
 variant {
   Err: ScanError;
   Ok: ScanResponse;
 };
type ScanResponse = 
 record {
   cooler_id: text;
   creation_date: Time;
   scans_left: nat32;
 };
type ScanError = 
 variant {
   ExpiredCount: text;
   InvalidCMAC: text;
   TagNotFound;
 };
type Scan = 
 record {
   cmac: CMAC;
   ctr: TagCtr;
   uid: TagUid;
 };
type SDM = 
 service {
   exportMappings: () -> (vec Mapping);
   importMappings: (vec text) -> (ImportMappingsResult);
   registerTag: (TagUid, vec Hex) -> (TagEncodeResult);
   scan: (Scan) -> (ScanResult);
 };
type Mapping = 
 record {
   cooler_id: text;
   uid: TagUid;
 };
type ImportMappingsResult = variant {Ok;};
type Hex = text;
type CMAC = text;
type AESKey = text;
service : () -> SDM
